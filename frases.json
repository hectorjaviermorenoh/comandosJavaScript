[
  {
    "english": "toFixed()",
    "spanish": "Formatea un número con una cantidad específica de decimales.",
    "pronunciation": "/tuː ˈfɪkst/",
    "description": "Este método de los números en JavaScript convierte un valor numérico en una cadena de texto, conservando el número especificado de decimales. toFixed() es especialmente útil en aplicaciones financieras o científicas donde se requiere una precisión específica en los resultados mostrados al usuario. Al redondear el número, asegura que la representación decimal sea constante. Por ejemplo, (3.14159).toFixed(2) devuelve '3.14'. El valor devuelto es siempre una cadena, por lo que para usar el valor numéricamente se debe convertir con parseFloat o parseInt."
  },
  {
    "english": "typeof",
    "spanish": "Devuelve el tipo de dato de un valor o variable.",
    "pronunciation": "/ˈtaɪp ˌɒv/",
    "description": "El operador typeof en JavaScript devuelve una cadena indicando el tipo de dato primitivo o de objeto de la variable o valor proporcionado. Puede identificar tipos como 'string', 'number', 'boolean', 'undefined', 'object', 'function' y 'symbol'. Es comúnmente utilizado en verificaciones o validaciones para determinar el tipo antes de proceder con ciertas operaciones y evitar errores de ejecución."
  },
  {
    "english": ".charAt()",
    "spanish": "Devuelve el carácter en la posición indicada dentro de un string.",
    "pronunciation": "/tʃɑːr æt/",
    "description": "El método charAt() permite acceder al carácter ubicado en una posición específica de una cadena de texto en JavaScript. Su sintaxis es string.charAt(indice), donde 'indice' es un número que indica la posición del carácter a retornar. Si el índice está fuera de rango, se devuelve una cadena vacía."
  },
  {
    "english": ".slice()",
    "spanish": "Extrae una porción de un string o array sin modificar el original.",
    "pronunciation": "/slaɪs/",
    "description": "slice() devuelve una copia superficial de una parte de un array o string, seleccionada desde el índice de inicio hasta el índice final (no incluido). Puede aceptar índices negativos para contar desde el final. Es útil para crear subcadenas o subconjuntos de datos, evitando alterar el array o cadena original."
  },
  {
    "english": ".split()",
    "spanish": "Divide un string en un array de substrings.",
    "pronunciation": "/splɪt/",
    "description": "split() divide un string en un array de fragmentos utilizando un separador especificado. Por ejemplo, 'a,b,c'.split(',') devuelve ['a', 'b', 'c']. Es ideal para convertir cadenas en listas manejables o procesables programáticamente."
  },
  {
    "english": ".pop()",
    "spanish": "Elimina el último elemento de un array.",
    "pronunciation": "/pɑp/",
    "description": "pop() elimina y devuelve el último elemento de un array, reduciendo su longitud en uno. Es útil en estructuras tipo pila (LIFO)."
  },
  {
    "english": ".shift()",
    "spanish": "Elimina el primer elemento de un array.",
    "pronunciation": "/ʃɪft/",
    "description": "shift() elimina el primer elemento de un array y desplaza los elementos restantes a la izquierda. Devuelve el elemento eliminado y modifica el array original."
  },
  {
    "english": ".unshift()",
    "spanish": "Agrega uno o más elementos al inicio de un array.",
    "pronunciation": "/ʌnˈʃɪft/",
    "description": "unshift() agrega uno o varios elementos al principio de un array, desplazando los elementos existentes hacia la derecha y devolviendo la nueva longitud del array."
  },
  {
    "english": ".join()",
    "spanish": "Une los elementos de un array en un string usando un separador.",
    "pronunciation": "/dʒɔɪn/",
    "description": "join() concatena todos los elementos de un array en una sola cadena de texto, separados por el separador especificado. Si no se define, el separador por defecto es una coma."
  },
  {
    "english": ".indexOf()",
    "spanish": "Devuelve el primer índice de un elemento en un array o string.",
    "pronunciation": "/ˈɪndɛks ʌv/",
    "description": "indexOf() devuelve el primer índice en el que se encuentra un elemento dado dentro de un array o string, o -1 si no se encuentra. Útil para buscar posiciones específicas en colecciones."
  },
  {
    "english": ".lastIndexOf()",
    "spanish": "Devuelve el último índice encontrado de un elemento dentro de un array o string.",
    "pronunciation": "/læst ˈɪndɛks ʌv/",
    "description": "lastIndexOf() funciona como indexOf pero inicia la búsqueda desde el final hacia el principio, permitiendo encontrar la última ocurrencia de un valor dentro de un array o string."
  },
  {
    "english": ".includes()",
    "spanish": "Verifica si un array o string contiene un elemento específico.",
    "pronunciation": "/ɪnˈkluːdz/",
    "description": "includes() determina si un array o string contiene un valor especificado, devolviendo true o false según corresponda. Es útil para verificaciones rápidas de existencia."
  },
  {
    "english": "while",
    "spanish": "Ejecuta un bloque de código mientras la condición sea verdadera.",
    "pronunciation": "/waɪl/",
    "description": "El bucle while ejecuta un bloque de código siempre que la condición especificada sea verdadera. Es un ciclo controlado por condición evaluada antes de cada iteración."
  },
  {
    "english": "do while",
    "spanish": "Ejecuta el bloque de código al menos una vez, luego verifica la condición.",
    "pronunciation": "/duː waɪl/",
    "description": "do...while es un ciclo que primero ejecuta el bloque de código y luego verifica la condición para repetir el proceso. Garantiza al menos una ejecución inicial."
  },
  {
    "english": ".splice()",
    "spanish": "Permite añadir, eliminar o reemplazar elementos dentro de un array.",
    "pronunciation": "/splaɪs/",
    "description": "splice() es un método poderoso que permite modificar el contenido de un array eliminando elementos existentes, agregando nuevos o ambos simultáneamente. Su sintaxis es array.splice(inicio, cantidad, elemento1, elemento2, ...). El primer parámetro indica desde qué índice empezar, el segundo cuántos elementos eliminar, y los parámetros adicionales son los nuevos elementos que se desean insertar. Es útil para actualizar colecciones dinámicas en tiempo de ejecución."
  },
  {
    "english": ".map()",
    "spanish": "Crea un nuevo array aplicando una función a cada uno de sus elementos.",
    "pronunciation": "/mæp/",
    "description": "map() recorre cada elemento de un array y aplica una función definida al mismo, devolviendo un nuevo array con los resultados. No modifica el array original. Es ideal para transformar estructuras de datos o convertir objetos en otro formato o unidad de medida."
  },
  {
    "english": ".filter()",
    "spanish": "Filtra los elementos de un array que cumplan con una condición.",
    "pronunciation": "/ˈfɪltər/",
    "description": "filter() crea un nuevo array con todos los elementos que pasan una prueba implementada por la función proporcionada. Se utiliza para obtener subconjuntos de datos que cumplen con un criterio específico, sin alterar el array original."
  },
  {
    "english": ".reduce()",
    "spanish": "Reduce un array a un solo valor aplicando una función acumuladora.",
    "pronunciation": "/rɪˈdjuːs/",
    "description": "reduce() aplica una función sobre un acumulador y cada elemento del array (de izquierda a derecha) para reducirlo a un único valor. Es útil en cálculos agregados como sumatorias, promedios o combinación de objetos complejos."
  },
  {
    "english": "parseInt()",
    "spanish": "Convierte una cadena de texto a un número entero.",
    "pronunciation": "/ˈpɑːrs ˈɪnt/",
    "description": "parseInt() analiza una cadena de texto y la convierte en un número entero según la base numérica especificada (radix). Si no puede convertir el valor, devuelve NaN. Es útil cuando se necesita convertir números almacenados como texto en valores numéricos utilizables."
  },
  {
    "english": "parseFloat()",
    "spanish": "Convierte una cadena de texto a un número decimal.",
    "pronunciation": "/ˈpɑːrs ˈfloʊt/",
    "description": "parseFloat() convierte una cadena que representa un número decimal en un número de tipo float (punto flotante). A diferencia de parseInt, mantiene los decimales del número interpretado."
  },
  {
    "english": "findIndex()",
    "spanish": "Retorna el índice del primer elemento que cumple una condición dada.",
    "pronunciation": "/faɪnd ˈɪndɛks/",
    "description": "findIndex() busca en el array y devuelve el índice del primer elemento que cumpla con la función de prueba proporcionada. Si ningún elemento satisface la condición, devuelve -1. Es útil para localizar posiciones dentro de una colección."
  },
  {
    "english": "setInterval()",
    "spanish": "Ejecuta una función de manera repetitiva en un intervalo de tiempo definido.",
    "pronunciation": "/ˌset ˈɪntərvəl/",
    "description": "setInterval() llama repetidamente a una función o código con un retraso fijo de tiempo (en milisegundos) entre cada ejecución. Es ideal para tareas recurrentes como actualizaciones de UI, polling o cronómetros."
  },
  {
    "english": "setTimeout()",
    "spanish": "Ejecuta una función después de un retardo en milisegundos.",
    "pronunciation": "/ˌset ˈtaɪmaʊt/",
    "description": "setTimeout() permite ejecutar una función una sola vez después de transcurrido el tiempo especificado en milisegundos. Es útil para retrasar la ejecución de acciones o animaciones."
  },
  {
    "english": "Spread Operator (...)",
    "spanish": "Permite expandir elementos de un array o propiedades de un objeto.",
    "pronunciation": "/spred ˈɑpəˌreɪtər/",
    "description": "El operador de propagación (...) permite desempaquetar elementos de un array o propiedades de un objeto en otro array u objeto. Es útil para crear copias superficiales, fusionar objetos o listas de parámetros en funciones."
  },
  {
    "english": "new Date()",
    "spanish": "Crea un nuevo objeto Date que representa la fecha y hora actuales.",
    "pronunciation": "/njuː deɪt/",
    "description": "new Date() crea una instancia de objeto Date que representa la fecha y hora actuales según el reloj del sistema, o bien una fecha específica si se pasan parámetros. Permite manipular y formatear fechas y horas."
  },
  {
    "english": ".bind()",
    "spanish": "Establece el contexto de ejecución de una función.",
    "pronunciation": "/baɪnd/",
    "description": "bind() crea una nueva función que, cuando es llamada, tiene su 'this' establecido con el valor proporcionado. Esto es clave para controlar el contexto de métodos en callbacks o eventos."
  }
]
